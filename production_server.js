// production_server.js - ÁîüÁî¢Áí∞Â¢ÉÂæåÁ´ØÊúçÂãôÂô®
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const dotenv = require('dotenv');

// ËºâÂÖ•Áí∞Â¢ÉËÆäÊï∏
dotenv.config();

const app = express();
const PORT = process.env.PORT || 8080;

// ‰∏≠Èñì‰ª∂
app.use(cors({
  origin: process.env.FRONTEND_URL || '*',
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ÂÅ•Â∫∑Ê™¢Êü•Á´ØÈªû
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// ÈÄ£Êé•MongoDB Atlas
const connectDB = async () => {
  try {
    const mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:27017/bilibili_clone';
    
    if (!mongoURI || mongoURI === 'mongodb://localhost:27017/bilibili_clone') {
      console.error('‚ùå MONGODB_URI Áí∞Â¢ÉËÆäÊï∏Êú™Ë®≠ÁΩÆ');
      process.exit(1);
    }
    
    console.log('üîó Ê≠£Âú®ÈÄ£Êé• MongoDB Atlas...');
    await mongoose.connect(mongoURI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 30000,
      connectTimeoutMS: 30000,
      socketTimeoutMS: 30000,
    });
    console.log('üóÑÔ∏è MongoDB Atlas ÈÄ£Êé•ÊàêÂäü');
  } catch (error) {
    console.error('‚ùå MongoDB ÈÄ£Êé•Â§±Êïó:', error.message);
    console.error('Ë©≥Á¥∞ÈåØË™§:', error);
    process.exit(1);
  }
};

// Áî®Êà∂Ê®°Âûã
const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  nickname: { type: String, required: true },
  avatar: { type: String, default: 'https://picsum.photos/seed/default/100' },
  levelNum: { type: Number, default: 1 },
  isVerified: { type: Boolean, default: false },
  posts: { type: Number, default: 0 },
  follows: { type: Number, default: 0 },
  friends: { type: Number, default: 0 },
  createdAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);

// ÊñáÁ´†Ê®°Âûã
const postSchema = new mongoose.Schema({
  title: { type: String, required: true },
  content: { type: String, required: true },
  author: { type: String, required: true },
  authorId: { type: String, required: true },
  category: { type: String, required: true },
  mainTab: { type: String, required: true },
  type: { type: String, required: true },
  city: { type: String, required: true },
  tags: [String],
  images: [String],
  videos: [String],
  likes: { type: Number, default: 0 },
  comments: { type: Number, default: 0 },
  views: { type: Number, default: 0 },
  shares: { type: Number, default: 0 },
  createdAt: { type: Date, default: Date.now }
});

const Post = mongoose.model('Post', postSchema);

// ÈóúÊ≥®Ê®°Âûã
const followSchema = new mongoose.Schema({
  follower: { type: String, required: true },
  following: { type: String, required: true },
  createdAt: { type: Date, default: Date.now }
});

const Follow = mongoose.model('Follow', followSchema);

// Ë®äÊÅØÊ®°Âûã
const messageSchema = new mongoose.Schema({
  sender: { type: String, required: true },
  receiver: { type: String, required: true },
  content: { type: String, required: true },
  isRead: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now }
});

const Message = mongoose.model('Message', messageSchema);

// ÈÄöÁü•Ê®°Âûã
const notificationSchema = new mongoose.Schema({
  user: { type: String, required: true },
  type: { type: String, required: true },
  title: { type: String, required: true },
  content: { type: String, required: true },
  isRead: { type: Boolean, default: false },
  relatedUser: {
    nickname: String,
    avatar: String
  },
  createdAt: { type: Date, default: Date.now }
});

const Notification = mongoose.model('Notification', notificationSchema);

// JWTË™çË≠â‰∏≠Èñì‰ª∂
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'ÈúÄË¶ÅË™çË≠â‰ª§Áâå' });
  }

  jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key', (err, user) => {
    if (err) {
      return res.status(403).json({ error: 'ÁÑ°ÊïàÁöÑ‰ª§Áâå' });
    }
    req.user = user;
    next();
  });
};

// ===== Ë™çË≠âAPI =====

// Áî®Êà∂Ë®ªÂÜä
app.post('/api/auth/register', async (req, res) => {
  try {
    const { email, password, nickname } = req.body;

    if (!email || !password || !nickname) {
      return res.status(400).json({ error: 'Ë´ãÂ°´ÂØ´ÊâÄÊúâÂøÖÂ°´Ê¨Ñ‰Ωç' });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: 'Áî®Êà∂Â∑≤Â≠òÂú®' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({
      email,
      password: hashedPassword,
      nickname
    });

    await user.save();

    const token = jwt.sign(
      { id: user._id, email: user.email },
      process.env.JWT_SECRET || 'your-secret-key',
      { expiresIn: '7d' }
    );

    res.json({
      success: true,
      token,
      user: {
        id: user._id,
        email: user.email,
        nickname: user.nickname,
        avatar: user.avatar,
        levelNum: user.levelNum,
        isVerified: user.isVerified
      }
    });
  } catch (error) {
    console.error('Ë®ªÂÜäÈåØË™§:', error);
    res.status(500).json({ error: 'Ë®ªÂÜäÂ§±Êïó' });
  }
});

// Áî®Êà∂ÁôªÂÖ•
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ error: 'Áî®Êà∂‰∏çÂ≠òÂú®' });
    }

    const isValidPassword = await bcrypt.compare(password, user.password);
    if (!isValidPassword) {
      return res.status(400).json({ error: 'ÂØÜÁ¢ºÈåØË™§' });
    }

    const token = jwt.sign(
      { id: user._id, email: user.email },
      process.env.JWT_SECRET || 'your-secret-key',
      { expiresIn: '7d' }
    );

    res.json({
      success: true,
      token,
      user: {
        id: user._id,
        email: user.email,
        nickname: user.nickname,
        avatar: user.avatar,
        levelNum: user.levelNum,
        isVerified: user.isVerified
      }
    });
  } catch (error) {
    console.error('ÁôªÂÖ•ÈåØË™§:', error);
    res.status(500).json({ error: 'ÁôªÂÖ•Â§±Êïó' });
  }
});

// Áç≤ÂèñÁî®Êà∂Ë≥áÊñô
app.get('/api/auth/profile', authenticateToken, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ error: 'Áî®Êà∂‰∏çÂ≠òÂú®' });
    }

    // Ë®àÁÆóÁµ±Ë®àÊï∏Êìö
    const postsCount = await Post.countDocuments({ authorId: user._id });
    const followsCount = await Follow.countDocuments({ follower: user._id });
    const friendsCount = await Follow.countDocuments({ follower: user._id });

    res.json({
      success: true,
      user: {
        id: user._id,
        email: user.email,
        nickname: user.nickname,
        avatar: user.avatar,
        levelNum: user.levelNum,
        isVerified: user.isVerified,
        posts: postsCount,
        follows: followsCount,
        friends: friendsCount
      }
    });
  } catch (error) {
    console.error('Áç≤ÂèñÁî®Êà∂Ë≥áÊñôÈåØË™§:', error);
    res.status(500).json({ error: 'Áç≤ÂèñÁî®Êà∂Ë≥áÊñôÂ§±Êïó' });
  }
});

// ===== ÊñáÁ´†API =====

// Áç≤ÂèñÊñáÁ´†ÂàóË°®
app.get('/api/posts', async (req, res) => {
  try {
    const { page = 1, limit = 20, mainTab, category } = req.query;
    const skip = (page - 1) * limit;

    let query = {};
    if (mainTab) query.mainTab = mainTab;
    if (category) query.category = category;

    const posts = await Post.find(query)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    const total = await Post.countDocuments(query);

    res.json({
      success: true,
      posts,
      total,
      page: parseInt(page),
      limit: parseInt(limit)
    });
  } catch (error) {
    console.error('Áç≤ÂèñÊñáÁ´†ÂàóË°®ÈåØË™§:', error);
    res.status(500).json({ error: 'Áç≤ÂèñÊñáÁ´†ÂàóË°®Â§±Êïó' });
  }
});

// ÂâµÂª∫ÊñáÁ´†
app.post('/api/posts', authenticateToken, async (req, res) => {
  try {
    const { title, content, category, mainTab, type, city, images, videos } = req.body;

    const post = new Post({
      title,
      content,
      author: req.user.nickname,
      authorId: req.user.id,
      category,
      mainTab,
      type,
      city,
      images: images || [],
      videos: videos || []
    });

    await post.save();

    res.json({
      success: true,
      post
    });
  } catch (error) {
    console.error('ÂâµÂª∫ÊñáÁ´†ÈåØË™§:', error);
    res.status(500).json({ error: 'ÂâµÂª∫ÊñáÁ´†Â§±Êïó' });
  }
});

// ===== ÊêúÁ¥¢API =====

// ÊêúÁ¥¢ÊñáÁ´†
app.get('/api/search/posts', async (req, res) => {
  try {
    const { q: query, category, page = 1, limit = 20 } = req.query;

    if (!query || query.trim().isEmpty) {
      return res.status(400).json({ error: 'ÊêúÁ¥¢ÈóúÈçµÂ≠ó‰∏çËÉΩÁÇ∫Á©∫' });
    }

    const searchQuery = query.trim();
    let filter = {
      $or: [
        { title: { $regex: searchQuery, $options: 'i' } },
        { content: { $regex: searchQuery, $options: 'i' } },
        { author: { $regex: searchQuery, $options: 'i' } },
        { category: { $regex: searchQuery, $options: 'i' } },
        { city: { $regex: searchQuery, $options: 'i' } }
      ]
    };

    if (category && category !== 'all') {
      filter.category = category;
    }

    const posts = await Post.find(filter)
      .sort({ createdAt: -1 })
      .skip((page - 1) * limit)
      .limit(parseInt(limit));

    const total = await Post.countDocuments(filter);

    res.json({
      success: true,
      posts,
      total,
      page: parseInt(page),
      limit: parseInt(limit),
      query: searchQuery
    });
  } catch (error) {
    console.error('ÊêúÁ¥¢ÊñáÁ´†ÈåØË™§:', error);
    res.status(500).json({ error: 'ÊêúÁ¥¢Â§±Êïó' });
  }
});

// Áç≤ÂèñÁÜ±ÈñÄÊêúÁ¥¢ÈóúÈçµÂ≠ó
app.get('/api/search/trending', async (req, res) => {
  try {
    const trendingKeywords = [
      'ÁæéÈ£üÊé®Ëñ¶',
      'ÊóÖÈÅäÊôØÈªû',
      '‰∫åÊâãÁõ∏Ê©ü',
      'ÂÅ•Ë∫´ÈÅãÂãï',
      'Êâã‰ΩúÂ∑•Ëóù',
      'ÁßëÊäÄÁî¢ÂìÅ',
      'Êõ∏Á±ç‰∫§Êèõ',
      'ÂØµÁâ©Áî®ÂìÅ',
      'ÊúçË£ùÊê≠ÈÖç',
      'ÂÆ∂Â±Ö‰ΩàÁΩÆ'
    ];

    res.json({
      success: true,
      keywords: trendingKeywords
    });
  } catch (error) {
    console.error('Áç≤ÂèñÁÜ±ÈñÄÊêúÁ¥¢ÈåØË™§:', error);
    res.status(500).json({ error: 'Áç≤ÂèñÁÜ±ÈñÄÊêúÁ¥¢Â§±Êïó' });
  }
});

// ÂïüÂãïÊúçÂãôÂô®
const startServer = async () => {
  await connectDB();
  
  app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ ÁîüÁî¢Áí∞Â¢ÉÊúçÂãôÂô®ÈÅãË°åÂú®Á´ØÂè£ ${PORT}`);
    console.log(`üåê ÂÅ•Â∫∑Ê™¢Êü•: http://localhost:${PORT}/api/health`);
    console.log(`üìä ‰ΩøÁî®MongoDB AtlasÊï∏ÊìöÂ∫´`);
  });
};

startServer().catch(console.error);
